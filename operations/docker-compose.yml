services:
  minio:
    image: minio/minio
    container_name: minio-storage
    entrypoint: [""]
    command: ["sh", "-c", "mkdir -p /data/mimir /data/loki && minio server --quiet /data --console-address :9001"]
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=supersecret
    volumes:
      - /mnt/data/opsdata/minio:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 5
    restart: always

  #minio-init:
  #  image: minio/mc:latest
  #  container_name: minio-init
  #  entrypoint: >
  #    /bin/sh -c "
  #    until (/usr/bin/mc alias set minio http://minio:9000 minioadmin supersecret); do
  #      echo 'Waiting for MinIO...'; sleep 3;
  #    done;
  #    /usr/bin/mc mb minio/loki;
  #    exit 0;
  #    "
  #  depends_on:
  #    minio:
  #      condition: service_healthy
  #  restart: no

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    pull_policy: always
    environment:
      - GF_USERS_DEFAULT_THEME=${GF_USERS_DEFAULT_THEME}
      - GF_LOG_MODE=${GF_LOG_MODE}
      - GF_LOG_LEVEL=${GF_LOG_LEVEL}
      - GF_SERVER_ROOT_URL=${GF_SERVER_ROOT_URL}
      - GF_SECURITY_ADMIN_USER=${GF_SECURITY_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD}

      - GF_SMTP_ENABLED=${GF_SMTP_ENABLED}
      - GF_SMTP_HOST=${GF_SMTP_HOST}
      - GF_SMTP_USER=${GF_SMTP_USER}
      - GF_SMTP_PASSWORD=${GF_SMTP_PASSWORD}
      - GF_SMTP_SKIP_VERIFY=${GF_SMTP_SKIP_VERIFY}
      - GF_SMTP_STARTTLS_MODE=${GF_SMTP_STARTTLS_MODE}
      - GF_SMTP_FROM_ADDRESS=${GF_SMTP_FROM_ADDRESS}
      - GF_SMTP_FROM_NAME=${GF_SMTP_FROM_NAME}

      - GF_AUTH_GOOGLE_ENABLED=${GF_AUTH_GOOGLE_ENABLED}
      - GF_AUTH_GOOGLE_CLIENT_ID=${GF_AUTH_GOOGLE_CLIENT_ID}
      - GF_AUTH_GOOGLE_CLIENT_SECRET=${GF_AUTH_GOOGLE_CLIENT_SECRET}
      - GF_AUTH_GOOGLE_SCOPES=${GF_AUTH_GOOGLE_SCOPES}
      - GF_AUTH_GOOGLE_AUTH_URL=${GF_AUTH_GOOGLE_AUTH_URL}
      - GF_AUTH_GOOGLE_TOKEN_URL=${GF_AUTH_GOOGLE_TOKEN_URL}
      - GF_AUTH_GOOGLE_API_URL=${GF_AUTH_GOOGLE_API_URL}
      - GF_AUTH_GOOGLE_HOSTED_DOMAIN=${GF_AUTH_GOOGLE_HOSTED_DOMAIN}
      - GF_AUTH_GOOGLE_ALLOWED_DOMAINS=${GF_AUTH_GOOGLE_ALLOWED_DOMAINS}
      - GF_AUTH_GOOGLE_ALLOW_SIGN_UP=${GF_AUTH_GOOGLE_ALLOW_SIGN_UP}
    volumes:
      - ./config/grafana-provisioning-dashboards.yaml:/etc/grafana/provisioning/dashboards/provisioning-dashboards.yaml:ro
      - ./config/grafana-provisioning-datasources.yaml:/etc/grafana/provisioning/datasources/provisioning-datasources.yaml:ro

      - ./dashboards/mimir-alertmanager.json:/var/lib/grafana/dashboards/mimir-alertmanager.json:ro
      - ./dashboards/mimir-compactor.json:/var/lib/grafana/dashboards/mimir-compactor.json:ro
      - ./dashboards/mimir-object-store.json:/var/lib/grafana/dashboards/mimir-object-store.json:ro
      - ./dashboards/mimir-overrides.json:/var/lib/grafana/dashboards/mimir-overrides.json:ro
      - ./dashboards/mimir-queries.json:/var/lib/grafana/dashboards/mimir-queries.json:ro
      - ./dashboards/mimir-reads.json:/var/lib/grafana/dashboards/mimir-reads.json:ro
      - ./dashboards/mimir-ruler.json:/var/lib/grafana/dashboards/mimir-ruler.json:ro
      - ./dashboards/mimir-tenants.json:/var/lib/grafana/dashboards/mimir-tenants.json:ro
      - ./dashboards/mimir-top-tenants.json:/var/lib/grafana/dashboards/mimir-top-tenants.json:ro
      - ./dashboards/mimir-writes.json:/var/lib/grafana/dashboards/mimir-writes.json:ro
    ports:
      - 3000:3000

  #promtail:
  #  image: grafana/promtail:2.9.2
  #  container_name: promtail
  #  command: -config.file=/etc/promtail/config.yml
  #  volumes:
  #    - ./config/promtail-config.yaml:/etc/promtail/config.yml
  #    - /data/promtail/log:/var/log

  #alloy:
  #  image: grafana/alloy:latest
  #  container_name: alloy
  #  user: root
  #  ports:
  #    - "12345:12345"
  #  volumes:
  #    - "./config/config.alloy:/etc/alloy/config.alloy"
  #    - "./config/endpoints.json:/etc/alloy/endpoints.json"
  #    - "/var/log:/var/log/host"
  #  command: [
  #    "run",
  #    "--server.http.listen-addr=0.0.0.0:12345",
  #    "--stability.level=public-preview",
  #    "/etc/alloy/config.alloy"
  #  ]

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --log.level=error
      - --storage.tsdb.path=/prometheus
      - --web.console.libraries=/usr/share/prometheus/console_libraries
      - --web.console.templates=/usr/share/prometheus/consoles
    volumes:
      - ./config/prometheus.yaml:/etc/prometheus/prometheus.yml
      - ./config/rules.yaml:/etc/prometheus/rules.yaml
    depends_on:
      - "mimir-1"
      - "mimir-2"
      - "mimir-3"

  load-balancer:
    image: nginx:latest
    container_name: load-balancer
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - "mimir-1"
      - "mimir-2"
      - "mimir-3"
    ports:
      - 9009:9009

  loki:
    image: grafana/loki:2.9.2
    container_name: loki
    user: root
    command: -config.file=/etc/loki/local-config.yaml
    ports:
      - "3100:3100"
    volumes:
      - ./config/loki-config.yaml:/etc/loki/local-config.yaml
      - /mnt/data/opsdata/loki:/tmp/loki
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3100/ready"]
      interval: 30s
      timeout: 20s
      retries: 5
    depends_on:
      minio:
        condition: service_healthy

  mimir-1:
    image: grafana/mimir:latest
    command: ["-config.file=/etc/mimir.yaml"]
    hostname: mimir-1
    container_name: mimir-1
    volumes:
      - ./config/mimir.yaml:/etc/mimir.yaml
      - ./config/alertmanager-fallback-config.yaml:/etc/alertmanager-fallback-config.yaml
      - /mnt/data/opsdata/mimir1:/data
    depends_on:
      minio:
        condition: service_healthy

  mimir-2:
    image: grafana/mimir:latest
    command: ["-config.file=/etc/mimir.yaml"]
    hostname: mimir-2
    container_name: mimir-2
    volumes:
      - ./config/mimir.yaml:/etc/mimir.yaml
      - ./config/alertmanager-fallback-config.yaml:/etc/alertmanager-fallback-config.yaml
      - /mnt/data/opsdata/mimir2:/data
    depends_on:
      minio:
        condition: service_healthy

  mimir-3:
    image: grafana/mimir:latest
    command: ["-config.file=/etc/mimir.yaml"]
    hostname: mimir-3
    container_name: mimir-3
    volumes:
      - ./config/mimir.yaml:/etc/mimir.yaml
      - ./config/alertmanager-fallback-config.yaml:/etc/alertmanager-fallback-config.yaml
      - /mnt/data/opsdata/mimir3:/data
    depends_on:
      minio:
        condition: service_healthy